#!/usr/bin/env python

import logging 
import time

# to catch ctrl-c
import signal
import sys

# read config file
import ConfigParser 
config = ConfigParser.ConfigParser()
config.read('config.ini')

#
# doorlockd classes
#
import Solenoid
import Mifare
import Button


#
# create logger with 'doorlockd'
#
logger = logging.getLogger('doorlockd')
logger.setLevel(config.get('doorlockd', 'log_level'))
# create file handler 
fh = logging.FileHandler(config.get('doorlockd', 'log_file_name'))
fh.setLevel(config.get('doorlockd', 'log_file_level'))
# create console handler on stderr
ch = logging.StreamHandler()
ch.setLevel(config.get('doorlockd', 'log_stderr_level'))
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)
logger.info('doorlockd starting up...')

#
# init our objects
#
if config.get('doorlockd', 'auth_module') == 'auth_xml':
    import XmlDB
    keydb = XmlDB.KeyDB()

if config.get('doorlockd', 'auth_module') == 'auth_sqlite3':
    import SqliteDB
    keydb = SqliteDB.KeyDB()
    
if keydb is None:
    logger.critical('error: no valid auth_module is defined.')
    exit()
    
solenoid = Solenoid.Solenoid(config.get('doorlockd', 'solenoid_pin'), config.get('doorlockd', 'solenoid_name'))
rfid = Mifare.KeyReader()
if config.getboolean('doorlockd', 'button_enabled'):
	button = Button.Button(config.get('doorlockd', 'button_pin'), config.get('doorlockd', 'button_name'))
	button.solenoid = solenoid
else:
	button = None

def openfunctie(hwid):
    logger.debug("openfunctie key uid: " + str(hwid))
    entry = keydb.getent_by_hwid(hwid)
    
    if (entry['access'] == "True"):
        logger.critical( 'access granted: "{:s}" - "{:s}" - "{:s}" - "{:s}" '.format(entry.get('hwid', 'not found'), solenoid.name ,entry.get('name', 'not found'), '...' ))
        solenoid.open()
    else:
        logger.critical('access denied:  "{:s}" - "{:s}" - "{:s}" - "{:s}" '.format(entry.get('hwid', 'not found'), solenoid.name, entry.get('name', 'not found'), entry.get('error', 'no error message avilable') ))
        time.sleep(1)
        
    

def signal_handler_stop(signal, frame):
    logger.info('stopping by sigint or sigterm (ctrl-c or systemd stop)')
    rfid.cleanup()
    solenoid.cleanup()

    if button is not None:
    	button.cleanup()

    logger.info('everything has stopped')
    sys.exit(0)


def signal_handler_reload(signal, frame):
    logger.info('SIG HUP received, reloading access db')
    keydb.read_db()



signal.signal(signal.SIGINT, signal_handler_stop)
signal.signal(signal.SIGTERM, signal_handler_stop)
signal.signal(signal.SIGHUP, signal_handler_reload)

logger.info('starting wait_for_key... ')

while True:
    rfid.wait_for_key(openfunctie)
