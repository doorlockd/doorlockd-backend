## raise events      
src/libs/Button.py:		dc.e.raise_event('{}_pushed'.format(self.config_name)) # raise button?_pushed when button is pushed
src/libs/Button.py:		dc.e.raise_event(self.trigger_action) # raise configured trigger_action for this Button
src/libs/Buzzer.py:		dc.e.raise_event('buzzer_on') # when buzzer is on
src/libs/Buzzer.py:		dc.e.raise_event('buzzer_off') # when buzzer is off
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_ready') # when rfid starts detecting
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_stopped') # when rfid is stopped detecting
src/libs/RfidReaderRc522.py:		dc.e.raise_event('rfid_comm_pulse') # when there is any RFID communication
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_comm_ready') # when there is any RFID communication
src/libs/RfidReaderRc522.py:				dc.e.raise_event('rfid_comm_error') # when there is any RFID communication error 
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_access_allowed') # raise when rfid is access_allowed
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_access_denied') # raise when rfid is access_denied, will folow by ..._fin in x seconds
src/libs/RfidReaderRc522.py:			dc.e.raise_event('rfid_access_denied_fin') # raise when rfid is access_denied after sleeping x seconds.
src/libs/RfidReaderRc522.py:		dc.e.raise_event(self.trigger_action, {'wait': True}) # raise configured trigger_action for rfid_action
src/libs/Solenoid.py:		dc.e.raise_event('solenoid_open') # when solenoid is on
src/libs/Solenoid.py:		dc.e.raise_event('solenoid_close') # when solenoid is off
## subscribe events  
src/app.py:	dc.e.subscribe('open_door', dc.hw['solenoid'].event_callback)
src/app.py:	dc.e.subscribe('ring_buzzer', dc.hw['buzzer'].event_callback) 
src/libs/UiLeds.py:		dc.e.subscribe('rfid_ready', self._ecb_rfid_ready)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_stopped', self._ecb_rfid_stopped)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_comm_pulse', self._ecb_rfid_comm_pulse)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_comm_ready', self._ecb_rfid_comm_ready)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_access_denied', self._ecb_rfid_denied)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_access_allowed', self._ecb_rfid_access)
src/libs/UiLeds.py:		dc.e.subscribe('solenoid_open', self._ecb_solenoid_open)
src/libs/UiLeds.py:		dc.e.subscribe('solenoid_close', self._ecb_solenoid_close)
src/libs/UiLeds.py:		dc.e.subscribe('button1_pushed', self._ecb_button1_pushed)
src/libs/UiLeds.py:		dc.e.subscribe('button2_pushed', self._ecb_button2_pushed)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_ready', self._ecb_rfid_ready)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_stopped', self._ecb_rfid_stopped)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_comm_pulse', self._ecb_rfid_comm_pulse)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_comm_ready', self._ecb_rfid_comm_ready)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_access_denied', self._ecb_rfid_denied)
src/libs/UiLeds.py:		dc.e.subscribe('rfid_access_allowed', self._ecb_rfid_access)
src/libs/UiLeds.py:		dc.e.subscribe('solenoid_open', self._ecb_solenoid_open)
src/libs/UiLeds.py:		dc.e.subscribe('solenoid_close', self._ecb_solenoid_close)
src/libs/UiLeds.py:		dc.e.subscribe('button1_pushed', self._ecb_button1_pushed)
src/libs/UiLeds.py:		dc.e.subscribe('button2_pushed', self._ecb_button2_pushed)
